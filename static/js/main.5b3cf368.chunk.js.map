{"version":3,"sources":["images/sized_image.svg","components/icons.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Icons","react_default","a","createElement","className","href","target","rel","MyNavbar","Navbar_default","fixed","bg","expand","Brand","Component","App","navbar","src","me","alt","icons","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2NCmDzBC,MAjDf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,KACEC,UAAU,gBACVC,KAAK,8CACLC,OAAO,SACPC,IAAI,uBAEJN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAWfH,EAAAC,EAAAC,cAAA,KACEC,UAAU,cACVC,KAAK,kCACLC,OAAO,SACPC,IAAI,uBAEJN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAGfH,EAAAC,EAAAC,cAAA,KACEC,UAAU,UACVC,KAAK,6CACLC,OAAO,SACPC,IAAI,uBAEJN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAGfH,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVC,KAAK,oDACLC,OAAO,SACPC,IAAI,uBAEJN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6ECxBNI,mLAjBX,OACEP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAQQ,MAAM,MAAMC,GAAG,cAAcC,OAAO,MAQ1CX,EAAAC,EAAAC,cAACM,EAAAP,EAAOW,MAAR,CAAcR,KAAK,IAChB,gBAZYS,mBC4BRC,MAzBf,WACE,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAAA,UAAQC,UAAU,QAEdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,QACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,QACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAb,4CAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKc,IAAKC,IAAId,UAAU,UAAUe,IAAI,YAK1ClB,EAAAC,EAAAC,cAACiB,EAAD,QCdYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5b3cf368.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sized_image.17f28c8a.svg\";","import React from 'react';\n\nfunction Icons() {\n  return (\n    <div className=\"external-links\">\n      <a\n        className=\"linkedin-icon\"\n        href=\"https://www.linkedin.com/in/jonathansychan/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-linkedin\"></i>\n      </a>\n\n      {/* <a\n        className=\"youtube-icon\"\n        href=\"https://www.youtube.com/jonsyvids\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-youtube\"></i>\n      </a> */}\n      <a\n        className=\"github-icon\"\n        href=\"https://www.github.com/parmejon\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-github\"></i>\n      </a>\n\n      <a\n        className=\"ig-icon\"\n        href=\"https://www.instagram.com/parmejondesigns/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"fab fa-instagram\"></i>\n      </a>\n\n      <a\n        className=\"iot-icon\"\n        href=\"https://parmejon.github.io/Inanimate-Object-Test/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <i className=\"far fa-smile\"></i>\n      </a>\n    </div>\n  );\n}\nexport default Icons\n","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\n\nclass MyNavbar extends Component {\n  render() {\n    return (\n      <Navbar fixed=\"top\" bg=\"transparent\" expand=\"lg\">\n      {/*  <img\n        alt=\"\"\n        src={image}\n        width=\"60\"\n        height=\"60\"\n        className=\"navbar-icon\"\n        /> */ }\n        <Navbar.Brand href=\"\">\n          {'JSYC'}\n        </Navbar.Brand>\n      </Navbar>\n    )\n  }\n}\n\nexport default MyNavbar\n","import React from 'react';\nimport me from './images/sized_image.svg';\nimport Icons from './components/icons'\nimport MyNavbar from './components/navbar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyNavbar/>\n      <header className=\"main\">\n\n          <div className=\"main-content\">\n            <div className=\"main-words\">\n            <h1 className=\"main-title\">Jonathan</h1>\n            <h1 className=\"main-title\"> SY </h1>\n            <h1 className=\"main-title\">Chan</h1>\n            <i className=\"main-description\">an always learning full stack developer</i>\n          </div>\n\n          <div className=\"image-container\">\n            <img src={me} className=\"me-icon\" alt=\"main\"/>\n          </div>\n\n        </div>\n        </header>\n        <Icons/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}